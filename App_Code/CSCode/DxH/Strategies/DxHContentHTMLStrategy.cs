//------------------------------------------------------------------------------
// <ektron-generated>
//     This code was generated by a Ektron.
//
//     Changes to this file may cause incorrect behavior and loss of data
//     with the Digital Experience Hub ™.
//     Ektron recommends creating a new and separate Form Strategy if additional
//     strategies are required.
// </ektron-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;


namespace Ektron.Cms.Extensions
{
    using Ektron.Cms.Extensibility;
    using Ektron.DxH.Client;
    using Ektron.DxH.Common.Events;
    using Ektron.Cms.Instrumentation;
    using Ektron.Cms.Caching;
    using Ektron.DxH.Common.Contracts;
    using Ektron.DxH.Common.Objects;
    using System.Reflection;
    using Ektron.DxH.Common.Connectors;
    using Ektron.Cms.Framework.Settings.DxH;
    using Ektron.Cms.Settings.DxH;


    /// <summary>
    /// This strategy will alert the DxH of the publishing, updating, and deleting of HTML content items so subscribers of the context bus can act on these events.
    /// </summary>
    public sealed class DxHContentHTMLStrategy : ContentStrategy
    {
        #region private members
        private EventManagerClient _DxHEventManager;
        public EventManagerClient DxHEventManager
        {
            get
            {
                if (_DxHEventManager == null)
                {
                    _DxHEventManager = new EventManagerClient();
                }
                return _DxHEventManager;
            }
        }
        private ContextBusClient _contextBusClient;
        private ContextBusClient ContextBusClient
        {
            get
            {
                if (_contextBusClient == null)
                {
                    _contextBusClient = new ContextBusClient();
                }

                return _contextBusClient;
            }
        }
        private DxHConnectionManager _DxHConnManager;
        public DxHConnectionManager DxHConnManager
        {
            get
            {
                if (_DxHConnManager == null)
                    _DxHConnManager = new DxHConnectionManager(Framework.ApiAccessMode.Admin);
                return _DxHConnManager;
            }
        }
        private const string CLASS_NAME = "DxHContentHTMLStrategy";
        private const string CacheKey = "DxHContentHTMLEventDefCacheKey";
        private string AdapterName = string.Empty;
        private ICacheManager CachManger = null;
        #endregion

        #region overrides
        public override void OnAfterPublishContent(ContentData contentData, CmsEventArgs eventArgs)
        {
            //Log.WriteMessage(string.Format("-Begin {0}.OnAfterPublishContent.", CLASS_NAME), LogLevel.Verbose);
            //if (DxHUtils.IsDxHActive())
            //{

            //    if (contentData.Type == (int)Ektron.Cms.Common.EkEnumeration.CMSContentType.Content)
            //    {
            //        List<ConnectorFlyWeight> connectorFlyweights = this.ContextBusClient.GetRegisteredAdapterList();
            //        if (connectorFlyweights.Count > 0)
            //        {
            //            AdapterName = connectorFlyweights.FirstOrDefault(x => x.Id.ToLower().Contains("ektron")).Id;
            //            Login();

            //            EventDefinition HTMLDefinition = GetContentHTMLEventDef();

            //            if (HTMLDefinition != null)
            //            {
            //                EventInstance HTMLEventInstance = CreateContentDataEventInstance(HTMLDefinition, contentData);
            //                if (HTMLEventInstance != null)
            //                {
            //                    DxHEventManager.RaiseEvent(HTMLEventInstance);
            //                }
            //            }
            //            else
            //            {
            //                Log.WriteMessage(string.Format("{0}.OnAfterPublishContent could not load an EventDefition.", CLASS_NAME), LogLevel.Verbose);
            //            }
            //            LogOut();
            //        }
            //    }
            //}
            //Log.WriteMessage(string.Format("+Finish {0}.OnAfterPublishContent.", CLASS_NAME), LogLevel.Verbose);
            //base.OnAfterPublishContent(contentData, eventArgs);
        }




        #endregion

        #region private methods
        /// <summary>
        /// This will return the Content HTML Event Definition, which is a combination of ContentData properties and MetaDataProperties.
        /// </summary>
        /// <returns></returns>
        private EventDefinition GetContentHTMLEventDef()
        {
            Log.WriteMessage(string.Format("-Begin {0}.GetContentHTMLEventDef.", CLASS_NAME), LogLevel.Verbose);
            EventDefinition HTMLDefinition = null;
            try
            {

                CachManger = ObjectFactory.GetCacheManager();
                HTMLDefinition = CachManger.Get(CacheKey) as EventDefinition;

                if (HTMLDefinition == null)
                {

                    List<EventDefinition> EktronEventDefs = null;

                    if (!string.IsNullOrEmpty(AdapterName))
                    {
                        EktronEventDefs = this.ContextBusClient.GetEventDefinitionList(AdapterName);
                    }
                    if (EktronEventDefs != null)
                    {
                        HTMLDefinition = EktronEventDefs.FirstOrDefault(x => x.DisplayName.ToLower().Contains("html"));
                        CachManger.Add(CacheKey, HTMLDefinition, new TimeSpan(0, 10, 0));
                    }
                }
            }
            catch (Exception ex)
            {
                Log.WriteError(string.Format("{0}.GetContentHTMLEventDef failed: {1}.", CLASS_NAME, ex.Message));
            }

            Log.WriteMessage(string.Format("+Finish {0}.GetContentHTMLEventDef.", CLASS_NAME), LogLevel.Verbose);
            return HTMLDefinition;
        }

        /// <summary>
        /// This method returns the correct EventInstance based upon the event definion.
        /// This EventInstance can then be raised to the context bus.
        /// </summary>
        /// <param name="eventDefinition">The defintion which has the metdata describing ContentHTML Objects.</param>
        /// <param name="contentData">The newly published Ektron CMS content data object.</param>
        /// <returns></returns>
        private EventInstance CreateContentDataEventInstance(EventDefinition eventDefinition, ContentData contentData)
        {
            Log.WriteMessage(string.Format("-Begin {0}.CreateContentDataEventInstance.", CLASS_NAME), LogLevel.Verbose);
            EventInstance HTMLEventInstance = null;
            try
            {
                HTMLEventInstance = new EventInstance()
                {
                    DisplayName = eventDefinition.DisplayName,
                    Id = eventDefinition.Id
                };

                HTMLEventInstance.Payload = ConvertContentDataToIObjectInstance(eventDefinition, contentData);

            }
            catch (Exception ex)
            {
                Log.WriteError(string.Format("{0}.CreateContentDataEventInstance failed: {1}.", CLASS_NAME, ex.Message));
            }

            Log.WriteMessage(string.Format("+Finish {0}.CreateContentDataEventInstance.", CLASS_NAME), LogLevel.Verbose);
            return HTMLEventInstance;
        }

        /// <summary>
        /// This will return a context bus instance which is the payload for the Event Definition to be raised.
        /// </summary>
        /// <param name="eventDefinition">The defintion which has the metdata describing ContentHTML Objects.</param>
        /// <param name="contentData">The newly published Ektron CMS content data object.</param>
        /// <returns></returns>
        private IContextBusInstance ConvertContentDataToIObjectInstance(EventDefinition eventDefinition, ContentData contentData)
        {
            Log.WriteMessage(string.Format("-Begin {0}.ConvertContentDataToIObjectInstance.", CLASS_NAME), LogLevel.Verbose);
            IContextBusInstance htmlInstance = null;
            try
            {
                htmlInstance = new ObjectInstance(eventDefinition.Payload as ObjectDefinition);
                FillObjectInstance(htmlInstance, contentData);

            }
            catch (Exception ex)
            {
                Log.WriteError(string.Format("{0}.ConvertContentDataToIObjectInstance failed: {1}.", CLASS_NAME, ex.Message));
            }

            Log.WriteMessage(string.Format("+Finish {0}.ConvertContentDataToIObjectInstance.", CLASS_NAME), LogLevel.Verbose);
            return htmlInstance;

        }
        /// <summary>
        /// Converts the contentdata values into an object instance.
        /// </summary>
        /// <param name="theInstance">A context bus Object Instance to be passed to the event payload.</param>
        /// <param name="contentData">The newly published Ektron CMS content data object.</param>
        private void FillObjectInstance(IContextBusInstance theInstance, ContentData contentData)
        {
            Log.WriteMessage(string.Format("-Begin {0}.FillObjectInstance.", CLASS_NAME), LogLevel.Verbose);
            try
            {
                PropertyInfo[] contentProps = typeof(ContentData).GetProperties();
                Log.WriteMessage(string.Format("-Begin {0}.FillObjectInstance enumerating properties.", CLASS_NAME), LogLevel.Verbose);

                foreach (var prop in contentProps)
                {
                    try
                    {
                        var field = theInstance.Fields.Find(x => (x.Id.Split('|').Last()) == prop.Name);
                        if (field != null)
                        {
                            object o = contentData.GetType().GetProperty(prop.Name).GetGetMethod().Invoke(contentData, null);
                            if (o.GetType().IsEnum)
                            {
                                //enums are integers under the sheets and most DxH Object Instances are primitive types.
                                //get the value from the passed in content data and fill the field value.
                                field.Value = (int)contentData.GetType().GetProperty(prop.Name).GetGetMethod().Invoke(contentData, null);
                            }
                            else
                            {
                                //get the value from the passed in content data and fill the field value.
                                field.Value = contentData.GetType().GetProperty(prop.Name).GetGetMethod().Invoke(contentData, null);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Log.WriteError(string.Format("{0}.FillObjectInstance failed on property: {1}, with error: {2} .",
                            CLASS_NAME, prop.Name, ex.Message));
                    }
                }
                if (contentData.MetaData != null)
                {

                    foreach (var metaDataType in contentData.MetaData)
                    {
                        try
                        {
                            var field = theInstance.Fields.Find(x => x.Id == "DxH|ContentHtml|MetaData|" + metaDataType.Id.ToString().Trim());
                            if (field != null)
                            {
                                field.Value = metaDataType.Text;
                            }
                        }
                        catch (Exception ex)
                        {
                            Log.WriteError(string.Format("{0}.FillObjectInstance failed on metadata property property: {1}, with error: {2} .",
                                CLASS_NAME, metaDataType.Name, ex.Message));
                        }
                    }

                }
                Log.WriteMessage(string.Format("+Finish {0}.FillObjectInstance enumerating properties.", CLASS_NAME), LogLevel.Verbose);
            }
            catch (Exception ex)
            {
                Log.WriteError(string.Format("{0}.FillObjectInstance failed: {1}.", CLASS_NAME, ex.Message));
            }
            Log.WriteMessage(string.Format("+Finish {0}.FillObjectInstance.", CLASS_NAME), LogLevel.Verbose);
        }

        public void Login()
        {
            Log.WriteMessage(string.Format("-Begin {0}.Login.", CLASS_NAME), LogLevel.Verbose);
            try
            {
                Log.WriteMessage(string.Format("-Begin {0}.Login get connection data for adapter name: {1}", CLASS_NAME, AdapterName), LogLevel.Verbose);
                DxHConnectionCriteria connectionCriteria = new DxHConnectionCriteria();
                connectionCriteria.AddFilter(DxHConnectionProperty.AdapterName, Common.CriteriaFilterOperator.EqualTo, AdapterName);
                List<DxHConnectionData> connectionData = DxHConnManager.GetList(connectionCriteria);
                Log.WriteMessage(string.Format("+Finish {0}.Login get connection data for adapter name: {1}", CLASS_NAME, AdapterName), LogLevel.Verbose);
                if (connectionData.FirstOrDefault() != null)
                {
                    DxHConnectionData connection = connectionData.First();

                    Log.WriteMessage(string.Format("-Begin {0}.Login contextbus client login.", CLASS_NAME), LogLevel.Verbose);
                    ContextBusClient.Login(connection.ConnectionName, AdapterName);
                    Log.WriteMessage(string.Format("+Finish {0}.Login contextbus client login.", CLASS_NAME), LogLevel.Verbose);
                }
                else
                {
                    Log.WriteMessage(string.Format("{0}.Login could not retrieve a connection data object for adapter name: {1}.", CLASS_NAME, AdapterName), LogLevel.Verbose);
                }
            }
            catch (Exception ex)
            {
                Log.WriteError(string.Format("{0}.Login failed: {1}.", CLASS_NAME, ex.Message));
            }
            Log.WriteMessage(string.Format("+Finish {0}.Login.", CLASS_NAME), LogLevel.Verbose);
        }

        private void LogOut()
        {
            Log.WriteMessage(string.Format("-Begin {0}.LogOut.", CLASS_NAME), LogLevel.Verbose);

            try
            {
                ContextBusClient.Logout(AdapterName);
            }
            catch (Exception ex)
            {
                Log.WriteError(string.Format("{0}.LogOut failed: {1}.", CLASS_NAME, ex.Message));
            }

            Log.WriteMessage(string.Format("+Finish {0}.LogOut.", CLASS_NAME), LogLevel.Verbose);
        }
        #endregion
    }
}