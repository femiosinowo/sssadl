//------------------------------------------------------------------------------
// <ektron-generated>
//     This code was generated by a Ektron.
//
//     Changes to this file may cause incorrect behavior and loss of data
//     with the Digital Experience Hub ™.
//     Ektron recommends creating a new and separate Form Strategy if additional
//     strategies are required.
// </ektron-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.Web;
using Ektron.Cms.Common;
using Ektron.Cms.Framework.Settings.DxH;
using Ektron.Cms.Settings.DxH;
using Ektron.DxH.Client;

namespace Ektron.Cms.Extensions
{
    /// <summary>
    /// Summary description for CustomFormStrategy
    /// </summary>
    public class DxHFormStrategy : Ektron.Cms.Extensibility.Content.FormStrategy
    {

        public DxHUserConnectionManager dxhManager;
        ContentAPI commonApi = new ContentAPI();
        public const string FormServiceEndpoint = "{0}EktronConnector/tcp/EktronFormService";

        public override void OnAfterSubmit(FormData formData, FormSubmittedData submittedFormData, string formXml, Cms.Extensibility.CmsEventArgs eventArgs)
        {

            // first we need to retrieve the EktGUID from the ecm cookie.
            dxhManager = new DxHUserConnectionManager(Cms.Framework.ApiAccessMode.LoggedInUser);
            string siteURL = Ektron.Cms.Common.EkFunctions.GetURLBase(commonApi.RequestInformationRef.HostUrl, Convert.ToInt32(commonApi.RequestInformationRef.HostPort), commonApi.RequestInformationRef.HttpsProtocol == "on", Convert.ToInt32(commonApi.RequestInformationRef.HostSSLPort), false) + commonApi.RequestInformationRef.SitePath;
            string visitorId = commonApi.RequestInformationRef.ClientEktGUID;
            long userId = eventArgs.RequestInformation.UserId;

            submittedFormData.DataItems = injectFormFields(submittedFormData, formData.Id, visitorId);

            string[] strKeyValues = new string[2] 
                                    {
                                        "dxhvisitorguid|" + visitorId.ToString(),
                                        "siteURL|" + siteURL
                                    };

            #region EktronFormServiceClient
            if (DxHUtils.IsDxHActive())
            {
                var dxhFormServiceBinding = new NetTcpBinding { Security = { Mode = SecurityMode.None } };
                var existingConnection = DxHUtils.GetDxhUrl();

                var url = string.Format(FormServiceEndpoint, existingConnection.EndPoint.ToLower().Replace("/contextbus", "/"));

                var dxhFormServiceEndPoint = new EndpointAddress(new Uri(url));
                var channelFactory = new ChannelFactory<IEktronFormService>(dxhFormServiceBinding, dxhFormServiceEndPoint);
                var efsClient = channelFactory.CreateChannel();

                try
                {
                    ((IClientChannel)efsClient).Open();
                    efsClient.submitFormData(formData, submittedFormData, strKeyValues);
                    ((IClientChannel)efsClient).Close();
                    channelFactory.Close();
                }
                catch (Exception ex)
                {
                    EkException.LogException(ex, System.Diagnostics.EventLogEntryType.Error);
                    ((IClientChannel)efsClient).Abort();
                }
                finally
                {
                    switch (((IClientChannel)efsClient).State)
                    {
                        case CommunicationState.Opened:
                            ((IClientChannel)efsClient).Close();
                            break;
                        case CommunicationState.Opening:
                        case CommunicationState.Closing:
                            break;
                        case CommunicationState.Faulted:
                            ((IClientChannel)efsClient).Abort();
                            break;
                    }
                }
            }

            #endregion

            base.OnAfterSubmit(formData, submittedFormData, formXml, eventArgs);
        }

        private FormFieldDataItem[] injectFormFields(FormSubmittedData submittedFormData, long formId, string visitorId)
        {
            bool bFoundFormId = false;
            bool bFoundFormDataId = false;
            bool bFoundhubspotusertoken = false;
            bool ishubspot = false;
            string hubspotcookie = string.Empty;

            int iIncrementer = 2; // number of fields to inject includes formid, formdataid, hubspotusertoken
            int j = 0; // another counter

            if (this.GetTargetObjectDefinitionId(formId).ToLower() == "hubspot.contact")
            {
                iIncrementer++;
                ishubspot = true;
                if (HttpContext.Current != null)
                    hubspotcookie = (HttpContext.Current.Request.Cookies["hubspotutk"] != null ? HttpContext.Current.Request.Cookies["hubspotutk"].Value : "");

                if (submittedFormData.DataItems.Any(p => p.FieldName.ToLower().Equals("dxhhubspotusertoken")))
                {
                    string cookievalue = submittedFormData.DataItems.Single(p => p.FieldName.ToLower().Equals("dxhhubspotusertoken")).DataValue.ToString();
                    if (string.IsNullOrEmpty(cookievalue))
                    {
                        submittedFormData.DataItems.Single(p => p.FieldName.ToLower().Equals("dxhhubspotusertoken")).DataValue = hubspotcookie;
                    }
                    iIncrementer--;
                    bFoundhubspotusertoken = true;
                }
            }

            // iterate through all of the fields to find dxhformid and/or dxhformdataid.
            // if they are found we will check if they have values. If they have no values
            // we will fill them in.
            for (int i = 0; i < submittedFormData.DataItems.Count(); i++)
            {
                if (submittedFormData.DataItems[i].FieldName.ToLower().Equals("dxhformid"))
                {
                    if (submittedFormData.DataItems[i].DataValue.ToString().Equals(string.Empty))
                    {
                        submittedFormData.DataItems[i].DataValue = formId.ToString();
                    }
                    iIncrementer--;
                    bFoundFormId = true;
                }
                else if (submittedFormData.DataItems[i].FieldName.ToLower().Equals("dxhformdataid"))
                {
                    if (submittedFormData.DataItems[i].DataValue.ToString().Equals(string.Empty))
                    {
                        submittedFormData.DataItems[i].DataValue = submittedFormData.Id.ToString();
                    }
                    iIncrementer--;
                    bFoundFormDataId = true;
                }
            }

            // we create a new array based on the original field count + any additional fields needed
            // which may include formid, formdataid

            FormFieldDataItem[] dataItems = new FormFieldDataItem[submittedFormData.DataItems.Count() + iIncrementer];

            for (j = 0; j < submittedFormData.DataItems.Count(); j++)
            {
                dataItems[j] = submittedFormData.DataItems[j];
            }

            if (!bFoundFormId)
            {
                // we create a field to contain the formid. This is so the Connector won't have to manipulate data
                // in order to send these data points to the contextbus
                Ektron.Cms.FormFieldDataItem ffdiFormId = new Ektron.Cms.FormFieldDataItem();
                ffdiFormId.FieldName = "DxHFormId";
                ffdiFormId.DataValue = formId.ToString();
                dataItems[j++] = ffdiFormId;
            }

            if (!bFoundFormDataId)
            {
                // we create a field to contain the formdataid. This is so the Connector won't have to manipulate data
                // in order to send these data points to the contextbus
                Ektron.Cms.FormFieldDataItem ffdiFormSubId = new Ektron.Cms.FormFieldDataItem();
                ffdiFormSubId.FieldName = "DxHFormDataId";
                ffdiFormSubId.DataValue = submittedFormData.Id.ToString();
                dataItems[j++] = ffdiFormSubId;
            }

            if (!bFoundhubspotusertoken && ishubspot)
            {
                // we create a field to contain the formdataid. This is so the Connector won't have to manipulate data
                // in order to send these data points to the contextbus
                Ektron.Cms.FormFieldDataItem hubspotusertoken = new Ektron.Cms.FormFieldDataItem();
                hubspotusertoken.FieldName = "DxHHubSpotUserToken";
                hubspotusertoken.DataValue = hubspotcookie;
                dataItems[j++] = hubspotusertoken;
            }

            return dataItems;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="formid"></param>
        /// <returns></returns>
        private string GetTargetObjectDefinitionId(long formid)
        {
            DxHMappingManager mapmanager = new DxHMappingManager();
            DxHCmsMappingCriteria cmsmappingcriteria = new DxHCmsMappingCriteria();
            cmsmappingcriteria.AddFilter(DxhCmsObjectMapProperty.ObjectId, CriteriaFilterOperator.EqualTo, formid);
            List<DxHCmsMappingData> cmsmappinglist = mapmanager.GetCmsMappingList(cmsmappingcriteria);
            if (cmsmappinglist != null && cmsmappinglist.Count > 0)
            {
                DxHMappingData dxhmappingData = mapmanager.GetItem(cmsmappinglist[0].MappingId);
                return dxhmappingData.TargetObjectDefinitionId;
            }

            return "";
        }
    }
}